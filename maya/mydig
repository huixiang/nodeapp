#!/usr/bin/env python
#-*- coding: utf8 -*-

# Name: mydig.py
# Desc: get dns info from maya or dpadmin,can use port,ip,app_name as search item.
# Author: huixiang@staff.sina.com.cn
# Date: 2013-05-10
# Modified: 2013-05-15

import sys
import optparse
import types,json
import traceback
import urllib2
from urllib2 import HTTPError,URLError

__version__ = '0.3'
#api_host = "maya-api.mars.grid.sina.com.cn:8788"
api_host = "maya-api.mars.grid.sina.com.cn:8788"

def usage():
    usage='''usage: mydig [-P <Port>] [-H <IP>] [-A AppName] [-t db|maya|all] 
             usage1: mydig -P 3762 
             usage2: mydig -H 10.69.6.42
             usage3: mydig -A netDevHi
             usage4: mydig -P 3762 -t db
             usage5: mydig --port 3762 --host 10.69.6.42
''' 
    print usage

def mydig(port="",host="",app="",type="all",verbose=""):
    try:
        result = ""
        #curl "http://10.55.28.58:8888/tools?a=dbdig&port=4033"
        # urllib.urlencode({"port":"9601","host":"10.75.19.79"}) ==> port=9601&host=10.75.19.79
        api_url = "http://%s/tools?a=dbdig"  %(api_host)
        url_suffix = ""
        if port:
            url_suffix +="&port=%s" %(port)
        if host:
            url_suffix +="&host=%s" %(host)
        if app:
            url_suffix +="&app=%s" %(app)
        if type:
            url_suffix +="&type=%s" %(type)
        api_url += url_suffix
        response = urllib2.urlopen(api_url,timeout=10).read()
        response = json.loads(response)
        #print api_url
        if verbose:
            print "api_url: %s" %(api_url)
            print "reponse:",response
        if response == None:
            msg = "Error,response from api is null"
            print color(msg)
        elif (response.has_key('status') and response.has_key('msg') and response['status'] == 0 ):
            print color(response['msg'])
        else:
            # response is ok
            print_info(response,type,verbose)
    except URLError, e:
        print "Error, API response failed." 
    except Exception , e:
        print "Error,exception occured. ", e
        traceback.print_exc()

def color(str,c='red'):
    s = ''
    if c == 'red':
        s = "%s[1;31;40m%s%s[0m" %(chr(27), str, chr(27))
    return s

def print_info(resp,type="all",verb=True):
    try:
        info_list = resp["info"]
        if type == "db" :
            info_str = "%8s %16s %8s %8s %8s %36s\n" %('Port','IP','Idc','Status','Type','Domain')
            info_str = color(info_str)
            for info in info_list :
                info_str += "%8s %16s %8s %8s %8s %36s\n" %(info['port'],info['ip'],info['idc'],info['status'],info['type'],info['domain'])
        else:
            info_str = "%8s %16s %8s %8s %8s %42s %8s %16s\n" %('Port','IP','Idc','Status','Type','Domain','Maya','AppName')
            info_str = color(info_str)
            for info in info_list :
                info_str += "%8s %16s %8s %8s %8s %42s %8s %16s\n" %(info['port'],info['ip'],info['idc'],info['status'],info['type'],info['domain'],info['maya'],info['app_name'])
           
        print info_str
        return  info_str 
    except Exception , e:
        print "Error,exception occured in print_info. ", e
        traceback.print_exc()

def main():
    p = optparse.OptionParser(description='',prog='mydig',version=__version__,usage="%prog [ port|ip|app ]")
    p.add_option("--port","-P",help="port to search")
    p.add_option("--host","-H",action="store",help="host ip address")
    p.add_option("--app","-A",action="store",help="appName in maya")
    p.add_option("--type","-t",action="store",type="choice",choices=['maya','db','all'],default="all",help="value should in maya,db,all")
    p.add_option("--verbose","-v",action="store_true",dest="verb",help="show verbose message.")
    options,arguments = p.parse_args()
    #print "%s -- %s  " %(options,arguments)
    # DBA may prefer usage: mydig 9601 then mydig -P 9601
    if len(arguments) == 1:
        port = arguments[0]
        return mydig(port)
    if  options.port != None or options.host != None or  options.app != None :
        mydig(options.port,options.host,options.app,options.type,options.verb) 
    else:
        usage()
       
if __name__=='__main__':
    main()
